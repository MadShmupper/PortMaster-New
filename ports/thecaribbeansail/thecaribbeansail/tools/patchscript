#!/bin/bash

# set gamedir to the current directory and set logfile
GAMEDIR="$PWD"
LOGFILE="$GAMEDIR/patchlog.txt"
LOGERR="$GAMEDIR/patchlog_error.txt"

# redirect output and error to the log file
exec > >(tee -a "$LOGFILE") 2>&1
echo "GAMEDIR is set to: $GAMEDIR"

# patch failure function
patch_failure() {
  mv "$LOGFILE" "$LOGERR"
  $ESUDO umount "$TOOLKIT"
  echo "Patching process failed."
  exit 1
}

# mount the gmtoolkit runtime
TOOLKIT="$HOME/gmtoolkit"
RUNTIME="$controlfolder/libs/gmtoolkit.squashfs"
if [ -f "$RUNTIME" ]; then
  $ESUDO mkdir -p "$TOOLKIT"
  $ESUDO umount "$RUNTIME" || true
  $ESUDO mount "$RUNTIME" "$TOOLKIT"
else
  echo "This port requires the GMToolkit runtime. Please download it."
  sleep 2
  patch_failure
fi

# exports
export PATH="$TOOLKIT/gmtools:$PATH"
export LD_LIBRARY_PATH="/usr/lib:$TOOLKIT/libs:$LD_LIBRARY_PATH"
export SDL_GAMECONTROLLERCONFIG="$sdl_controllerconfig"
export DATADIR="$GAMEDIR/assets"
export DATAFILE="thecaribbeansail"
export TMPDIR="$GAMEDIR/tmp"

# set up trap for cleaning tmpdir on exit
trap 'rm -rf "$TMPDIR"; echo "Cleaned up temporary files." >> "$LOGFILE"' 0

# attempt to get savedir from gmloader.json using jq
if command -v jq >/dev/null 2>&1; then
  SAVEDIR=$(jq -r '.save_dir // empty' "$GAMEDIR/gmloader.json" 2>/dev/null)
else
  SAVEDIR="$GAMEDIR/saves"
fi

# test for commands: python, zip
PYTHON=$(which python3)
if [ -z "$PYTHON" ]; then
  echo "Missing Python!"
  patch_failure
fi
ZIP=$(which zip)
if [ -z "$ZIP" ]; then
  echo "Missing zip!"
  patch_failure
fi

prepare_files() {
  # mv "$DATADIR/data.win" "$DATADIR/game.droid"
  # delete excess files
  find "$DATADIR" -type f \( \
    -name "*.exe" -o -name "*.dll" -o -name "*.hashdb" -o -name "*.pdf" -o  \
    -name "*.ico" -o -name "*.lnk" -o -name "*.msg" -o -name "*.zip" \
  \) -exec rm -f {} \;
}

compress_audio() {
  if $PYTHON "$TOOLKIT/gmtools/gmKtool.py" -vv -m 1000 -r -b 64 -d "$TMPDIR" "$DATADIR/game.droid"; then
    mv "$TMPDIR/"* "$DATADIR" && rmdir "$TMPDIR"
    echo "Audio compression applied successfully."
  else
    # failure
    echo "Audio compression failed for $GAMEFILE."
    rmdir "$TMPDIR"
    patch_failure
  fi
}

zip_archive() {
  zip -r -0 "$DATAFILE" ./assets/
  echo "Zipped contents to $DATAFILE"
  rm -Rf ./assets/
}

apply_xdelta() {
  # check if the data.win file exists and apply xdelta
  if [ -f "$DATADIR/data.win" ]; then
    echo "Applying xdelta patch"
    output=$($controlfolder/xdelta3 -d -s "$DATADIR/data.win" -f "./tools/patch_itch.xdelta3" "$DATADIR/game.droid" 2>&1)
    if [ $? -eq 0 ]; then
      echo "Patch applied successfully"
      echo "$output"
      rm "$DATADIR/data.win"
      touch "ver_itch"
    else
      echo "Failed to apply patch; assuming Steam version"
      echo "$output"
      mv "$DATADIR/data.win" "$DATADIR/game.droid" # just carry on if patch fails (might be the steam file)
      # exit 1
      touch "ver_steam"
    fi
  else
    echo "No data.win file found to patch!"
  fi
  sleep 1
}

zip_archive() {
  zip -r -0 "${DATAFILE}_itch.port" ./assets/
  echo "Zipped contents to $DATAFILE.port"
  zip -r -0 "${DATAFILE}_steam.port" ./assets/
  echo "Zipped contents to ${DATAFILE}_steam.port"
  rm -rf "$GAMEDIR/assets/"*

  sleep 1
}

# create install completion flag
install_complete() {
  touch "install_completed"
  # measure time to complete
  END_TIME=$(date +%s)
  DURATION=$((END_TIME - START_TIME))
  echo "Script completed in $DURATION seconds"
  echo "Installation completed successfully!"
  echo "-----------------------------"
  echo "Process finished at: $(date)"
}

process_game() { 
  echo "Preparing game..."
  prepare_files || patch_failure
  echo "Patching data.win..."
  apply_xdelta || patch_failure
  echo "Compressing audio..."
  compress_audio || patch_failure
  echo "Finishing up..."
  zip_archive || patch_failure
  install_complete
  sleep 1
  # unmount runtimes
  $ESUDO umount "$DOTNETDIR"
  $ESUDO umount "$TOOLKIT"
  # final completion message
  echo "Patching process complete!"
}

# call
process_game
